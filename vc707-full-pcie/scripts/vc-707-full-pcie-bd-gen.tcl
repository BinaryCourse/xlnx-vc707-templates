#*****************************************************************************************
# Vivado (TM) v2019.2 (64-bit)
#
# vc-707-full-pcie-bd-gen.tcl: Tcl script for re-creating project 'vc707-full-pcie'
#
# Generated by Vivado on Sun May 24 16:56:00 +0430 2020
# IP Build 2699827 on Thu Oct 24 21:16:38 MDT 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (vc-707-full-pcie-bd-gen.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/ali/work/company/avanet/ydoing/vc707-full-pcie/vc707-full-pcie.srcs/sources_1/bd/vc707/hdl/vc707_wrapper.v"
#    "/home/ali/work/company/avanet/ydoing/vc707-full-pcie/vc707-full-pcie.srcs/sources_1/bd/vc707/ip/vc707_ddr3_sdram_0/board.prj"
#    "/home/ali/work/company/avanet/ydoing/vc707-full-pcie/vc707-full-pcie.srcs/constrs_1/new/vc707-full-pcie.xdc"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "vc707-full-pcie"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "vc-707-full-pcie-bd-gen.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7vx485tffg1761-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:vc707:part0:1.4" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "kc705" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "2" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "2" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "2" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "2" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/vc707-full-pcie.srcs/sources_1/bd/vc707/hdl/vc707_wrapper.v"]\
 [file normalize "${origin_dir}/vc707-full-pcie.srcs/sources_1/bd/vc707/ip/vc707_ddr3_sdram_0/board.prj"]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "vc707_ddr3_sdram_0/board.prj"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "scoped_to_cells" -value "vc707_ddr3_sdram_0" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "vc707_wrapper" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${origin_dir}/vc707-full-pcie.srcs/constrs_1/new/vc707-full-pcie.xdc]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/vc707-full-pcie.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "$proj_dir/${_xil_proj_name_}.srcs/constrs_1/new/vc707-full-pcie.xdc" -objects $obj
set_property -name "target_ucf" -value "$proj_dir/${_xil_proj_name_}.srcs/constrs_1/new/vc707-full-pcie.xdc" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "vc707_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added


# Proc to create BD vc707
proc cr_bd_vc707 { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name vc707

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_ethernet:7.1\
  xilinx.com:ip:axi_dma:7.1\
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:axi_gpio:2.0\
  xilinx.com:ip:mig_7series:4.2\
  xilinx.com:ip:axi_emc:3.0\
  xilinx.com:ip:microblaze:11.0\
  xilinx.com:ip:axi_intc:4.1\
  xilinx.com:ip:axi_timer:2.0\
  xilinx.com:ip:xlconcat:2.1\
  xilinx.com:ip:mdm:3.2\
  xilinx.com:ip:axi_uart16550:2.0\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:util_ds_buf:2.1\
  xilinx.com:ip:xdma:4.1\
  xilinx.com:ip:lmb_bram_if_cntlr:4.0\
  xilinx.com:ip:lmb_v10:3.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }


##################################################################
# MIG PRJ FILE TCL PROCs
##################################################################

proc write_mig_file_vc707_ddr3_sdram_0 { str_mig_prj_filepath } {

   file mkdir [ file dirname "$str_mig_prj_filepath" ]
   set mig_prj_file [open $str_mig_prj_filepath  w+]

   puts $mig_prj_file {﻿<?xml version="1.0" encoding="UTF-8" standalone="no" ?>}
   puts $mig_prj_file {<Project NoOfControllers="1">}
   puts $mig_prj_file {  <ModuleName>design_1_mig_7series_1_0</ModuleName>}
   puts $mig_prj_file {  <dci_inouts_inputs>1</dci_inouts_inputs>}
   puts $mig_prj_file {  <dci_inputs>1</dci_inputs>}
   puts $mig_prj_file {  <Debug_En>OFF</Debug_En>}
   puts $mig_prj_file {  <DataDepth_En>1024</DataDepth_En>}
   puts $mig_prj_file {  <LowPower_En>ON</LowPower_En>}
   puts $mig_prj_file {  <XADC_En>Enabled</XADC_En>}
   puts $mig_prj_file {  <TargetFPGA>xc7vx485t-ffg1761/-2</TargetFPGA>}
   puts $mig_prj_file {  <Version>4.2</Version>}
   puts $mig_prj_file {  <SystemClock>Differential</SystemClock>}
   puts $mig_prj_file {  <ReferenceClock>Use System Clock</ReferenceClock>}
   puts $mig_prj_file {  <SysResetPolarity>ACTIVE HIGH</SysResetPolarity>}
   puts $mig_prj_file {  <BankSelectionFlag>FALSE</BankSelectionFlag>}
   puts $mig_prj_file {  <InternalVref>1</InternalVref>}
   puts $mig_prj_file {  <dci_hr_inouts_inputs>50 Ohms</dci_hr_inouts_inputs>}
   puts $mig_prj_file {  <dci_cascade>0</dci_cascade>}
   puts $mig_prj_file {  <Controller number="0">}
   puts $mig_prj_file {    <MemoryDevice>DDR3_SDRAM/sodimms/MT8JTF12864HZ-1G6</MemoryDevice>}
   puts $mig_prj_file {    <TimePeriod>1250</TimePeriod>}
   puts $mig_prj_file {    <VccAuxIO>1.8V</VccAuxIO>}
   puts $mig_prj_file {    <PHYRatio>4:1</PHYRatio>}
   puts $mig_prj_file {    <InputClkFreq>200</InputClkFreq>}
   puts $mig_prj_file {    <UIExtraClocks>1</UIExtraClocks>}
   puts $mig_prj_file {    <MMCM_VCO>800</MMCM_VCO>}
   puts $mig_prj_file {    <MMCMClkOut0> 8.000</MMCMClkOut0>}
   puts $mig_prj_file {    <MMCMClkOut1>1</MMCMClkOut1>}
   puts $mig_prj_file {    <MMCMClkOut2>1</MMCMClkOut2>}
   puts $mig_prj_file {    <MMCMClkOut3>1</MMCMClkOut3>}
   puts $mig_prj_file {    <MMCMClkOut4>1</MMCMClkOut4>}
   puts $mig_prj_file {    <DataWidth>64</DataWidth>}
   puts $mig_prj_file {    <DeepMemory>1</DeepMemory>}
   puts $mig_prj_file {    <DataMask>1</DataMask>}
   puts $mig_prj_file {    <ECC>Disabled</ECC>}
   puts $mig_prj_file {    <Ordering>Normal</Ordering>}
   puts $mig_prj_file {    <BankMachineCnt>4</BankMachineCnt>}
   puts $mig_prj_file {    <CustomPart>FALSE</CustomPart>}
   puts $mig_prj_file {    <NewPartName></NewPartName>}
   puts $mig_prj_file {    <RowAddress>14</RowAddress>}
   puts $mig_prj_file {    <ColAddress>10</ColAddress>}
   puts $mig_prj_file {    <BankAddress>3</BankAddress>}
   puts $mig_prj_file {    <MemoryVoltage>1.5V</MemoryVoltage>}
   puts $mig_prj_file {    <C0_MEM_SIZE>1073741824</C0_MEM_SIZE>}
   puts $mig_prj_file {    <UserMemoryAddressMap>ROW_BANK_COLUMN</UserMemoryAddressMap>}
   puts $mig_prj_file {    <PinSelection>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A20" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="B21" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[10]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="B17" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[11]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[12]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A21" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[13]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="B19" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="C20" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A19" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A17" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="D20" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="C18" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="D17" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[8]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="C19" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_addr[9]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="D21" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_ba[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="C21" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_ba[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="D18" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_ba[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="K17" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_cas_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15" PADName="G18" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_ck_n[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15" PADName="H19" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_ck_p[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="K19" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_cke[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="J17" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_cs_n[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="M13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="K15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="F12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="A14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="C23" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="D25" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="C31" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="F31" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dm[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="N14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="H13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[10]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="J13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[11]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="L16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[12]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="L15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[13]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="H14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[14]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="J15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[15]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[16]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[17]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[18]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[19]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="N13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="G13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[20]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="G12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[21]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[22]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="G14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[23]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[24]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="C13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[25]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[26]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[27]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[28]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[29]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="L14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="C16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[30]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[31]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A24" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[32]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B23" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[33]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B27" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[34]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B26" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[35]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A22" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[36]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B22" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[37]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A25" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[38]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="C24" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[39]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="M14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E24" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[40]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D23" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[41]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D26" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[42]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="C25" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[43]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E23" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[44]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D22" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[45]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F22" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[46]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E22" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[47]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A30" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[48]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D27" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[49]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="M12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A29" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[50]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="C28" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[51]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D28" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[52]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="B31" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[53]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A31" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[54]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="A32" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[55]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E30" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[56]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F29" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[57]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F30" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[58]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F27" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[59]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="N15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="C30" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[60]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="E29" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[61]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="F26" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[62]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="D30" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[63]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="M11" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="L12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="K14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[8]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="K13" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dq[9]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="M16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="J12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="G16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="C14" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="A27" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="E25" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="B29" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="E28" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_n[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="N16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="K12" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="H16" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="C15" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="A26" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="F25" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="B28" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="E27" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_dqs_p[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="H20" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_odt[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="E20" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_ras_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS15" PADName="C29" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_reset_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="F20" SLEW="FAST" VCCAUX_IO="NORMAL" name="ddr3_we_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15" PADName="E18" SLEW="" VCCAUX_IO="DONTCARE" name="sys_clk_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15" PADName="E19" SLEW="" VCCAUX_IO="DONTCARE" name="sys_clk_p"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS18" PADName="AV40" SLEW="" VCCAUX_IO="DONTCARE" name="sys_rst"/>}
   puts $mig_prj_file {    </PinSelection>}
   puts $mig_prj_file {    <System_Clock>}
   puts $mig_prj_file {      <Pin Bank="38" PADName="E19/E18(CC_P/N)" name="sys_clk_p/n"/>}
   puts $mig_prj_file {    </System_Clock>}
   puts $mig_prj_file {    <System_Control>}
   puts $mig_prj_file {      <Pin Bank="Select Bank" PADName="No connect" name="sys_rst"/>}
   puts $mig_prj_file {      <Pin Bank="Select Bank" PADName="No connect" name="init_calib_complete"/>}
   puts $mig_prj_file {      <Pin Bank="Select Bank" PADName="No connect" name="tg_compare_error"/>}
   puts $mig_prj_file {    </System_Control>}
   puts $mig_prj_file {    <TimingParameters>}
   puts $mig_prj_file {      <Parameters tcke="5" tfaw="30" tras="35" trcd="13.125" trefi="7.8" trfc="110" trp="13.125" trrd="6" trtp="7.5" twtr="7.5"/>}
   puts $mig_prj_file {    </TimingParameters>}
   puts $mig_prj_file {    <mrBurstLength name="Burst Length">8 - Fixed</mrBurstLength>}
   puts $mig_prj_file {    <mrBurstType name="Read Burst Type and Length">Sequential</mrBurstType>}
   puts $mig_prj_file {    <mrCasLatency name="CAS Latency">11</mrCasLatency>}
   puts $mig_prj_file {    <mrMode name="Mode">Normal</mrMode>}
   puts $mig_prj_file {    <mrDllReset name="DLL Reset">No</mrDllReset>}
   puts $mig_prj_file {    <mrPdMode name="DLL control for precharge PD">Slow Exit</mrPdMode>}
   puts $mig_prj_file {    <emrDllEnable name="DLL Enable">Enable</emrDllEnable>}
   puts $mig_prj_file {    <emrOutputDriveStrength name="Output Driver Impedance Control">RZQ/6</emrOutputDriveStrength>}
   puts $mig_prj_file {    <emrMirrorSelection name="Address Mirroring">Disable</emrMirrorSelection>}
   puts $mig_prj_file {    <emrCSSelection name="Controller Chip Select Pin">Enable</emrCSSelection>}
   puts $mig_prj_file {    <emrRTT name="RTT (nominal) - On Die Termination (ODT)">RZQ/4</emrRTT>}
   puts $mig_prj_file {    <emrPosted name="Additive Latency (AL)">0</emrPosted>}
   puts $mig_prj_file {    <emrOCD name="Write Leveling Enable">Disabled</emrOCD>}
   puts $mig_prj_file {    <emrDQS name="TDQS enable">Enabled</emrDQS>}
   puts $mig_prj_file {    <emrRDQS name="Qoff">Output Buffer Enabled</emrRDQS>}
   puts $mig_prj_file {    <mr2PartialArraySelfRefresh name="Partial-Array Self Refresh">Full Array</mr2PartialArraySelfRefresh>}
   puts $mig_prj_file {    <mr2CasWriteLatency name="CAS write latency">8</mr2CasWriteLatency>}
   puts $mig_prj_file {    <mr2AutoSelfRefresh name="Auto Self Refresh">Enabled</mr2AutoSelfRefresh>}
   puts $mig_prj_file {    <mr2SelfRefreshTempRange name="High Temparature Self Refresh Rate">Normal</mr2SelfRefreshTempRange>}
   puts $mig_prj_file {    <mr2RTTWR name="RTT_WR - Dynamic On Die Termination (ODT)">Dynamic ODT off</mr2RTTWR>}
   puts $mig_prj_file {    <PortInterface>AXI</PortInterface>}
   puts $mig_prj_file {    <AXIParameters>}
   puts $mig_prj_file {      <C0_C_RD_WR_ARB_ALGORITHM>RD_PRI_REG</C0_C_RD_WR_ARB_ALGORITHM>}
   puts $mig_prj_file {      <C0_S_AXI_ADDR_WIDTH>32</C0_S_AXI_ADDR_WIDTH>}
   puts $mig_prj_file {      <C0_S_AXI_DATA_WIDTH>512</C0_S_AXI_DATA_WIDTH>}
   puts $mig_prj_file {      <C0_S_AXI_ID_WIDTH>3</C0_S_AXI_ID_WIDTH>}
   puts $mig_prj_file {      <C0_S_AXI_SUPPORTS_NARROW_BURST>0</C0_S_AXI_SUPPORTS_NARROW_BURST>}
   puts $mig_prj_file {    </AXIParameters>}
   puts $mig_prj_file {  </Controller>}
   puts $mig_prj_file {</Project>}

   close $mig_prj_file
}
# End of write_mig_file_vc707_ddr3_sdram_0()



  
# Hierarchical cell: mblaze_alpha_local_memory
proc create_hier_cell_mblaze_alpha_local_memory { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_mblaze_alpha_local_memory() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB

  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB


  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_bram_if_cntlr, and set properties
  set dlmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 dlmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $dlmb_bram_if_cntlr

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 dlmb_v10 ]

  # Create instance: ilmb_bram_if_cntlr, and set properties
  set ilmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 ilmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $ilmb_bram_if_cntlr

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 lmb_bram ]
  set_property -dict [ list \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Use_RSTB_Pin {true} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_bram_if_cntlr/SLMB] [get_bd_intf_pins dlmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins dlmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_bus [get_bd_intf_pins ilmb_bram_if_cntlr/SLMB] [get_bd_intf_pins ilmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_cntlr [get_bd_intf_pins ilmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTB]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_bram_if_cntlr/LMB_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_bram_if_cntlr/LMB_Rst] [get_bd_pins ilmb_v10/SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_bram_if_cntlr/LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_bram_if_cntlr/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set ddr3_sdram [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 ddr3_sdram ]

  set dip_switches_8bits [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:gpio_rtl:1.0 dip_switches_8bits ]

  set led_8bits [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:gpio_rtl:1.0 led_8bits ]

  set linear_flash [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:emc_rtl:1.0 linear_flash ]

  set mdio_mdc [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:mdio_rtl:1.0 mdio_mdc ]

  set pcie_exp [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pcie_exp ]

  set pcie_ref [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_ref ]

  set push_buttons_5bits [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:gpio_rtl:1.0 push_buttons_5bits ]

  set rs232_uart [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 rs232_uart ]

  set sgmii [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:sgmii_rtl:1.0 sgmii ]

  set sgmii_mgt_clk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 sgmii_mgt_clk ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {125000000} \
   ] $sgmii_mgt_clk

  set sys_diff_clock [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 sys_diff_clock ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {200000000} \
   ] $sys_diff_clock


  # Create ports
  set pcie_rst_n [ create_bd_port -dir I -type rst pcie_rst_n ]
  set phy_reset_out [ create_bd_port -dir O -from 0 -to 0 -type rst phy_reset_out ]
  set reset [ create_bd_port -dir I -type rst reset ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $reset

  # Create instance: axi_eth_phy, and set properties
  set axi_eth_phy [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_ethernet:7.1 axi_eth_phy ]
  set_property -dict [ list \
   CONFIG.DIFFCLK_BOARD_INTERFACE {sgmii_mgt_clk} \
   CONFIG.ETHERNET_BOARD_INTERFACE {sgmii} \
   CONFIG.MDIO_BOARD_INTERFACE {mdio_mdc} \
   CONFIG.PHYRST_BOARD_INTERFACE {phy_reset_out} \
 ] $axi_eth_phy

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] [get_bd_pins /axi_eth_phy/axi_rxd_arstn]

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] [get_bd_pins /axi_eth_phy/axi_rxs_arstn]

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] [get_bd_pins /axi_eth_phy/axi_txc_arstn]

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] [get_bd_pins /axi_eth_phy/axi_txd_arstn]

  set_property -dict [ list \
   CONFIG.ASSOCIATED_BUSIF {m_axis_rxd:m_axis_rxs:s_axis_txc:s_axis_txd} \
   CONFIG.ASSOCIATED_RESET {axi_rxd_arstn:axi_rxs_arstn:axi_txc_arstn:axi_txd_arstn} \
 ] [get_bd_pins /axi_eth_phy/axis_clk]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {125000000} \
 ] [get_bd_pins /axi_eth_phy/gtref_clk_buf_out]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {125000000} \
 ] [get_bd_pins /axi_eth_phy/gtref_clk_out]

  set_property -dict [ list \
   CONFIG.SENSITIVITY {LEVEL_HIGH} \
 ] [get_bd_pins /axi_eth_phy/interrupt]

  set_property -dict [ list \
   CONFIG.SENSITIVITY {EDGE_RISING} \
 ] [get_bd_pins /axi_eth_phy/mac_irq]

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] [get_bd_pins /axi_eth_phy/phy_rst_n]

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] [get_bd_pins /axi_eth_phy/pma_reset_out]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {200000000} \
 ] [get_bd_pins /axi_eth_phy/ref_clk]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {62500000} \
 ] [get_bd_pins /axi_eth_phy/rxuserclk2_out]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {62500000} \
 ] [get_bd_pins /axi_eth_phy/rxuserclk_out]

  set_property -dict [ list \
   CONFIG.ASSOCIATED_BUSIF {s_axi} \
   CONFIG.ASSOCIATED_RESET {s_axi_lite_resetn} \
 ] [get_bd_pins /axi_eth_phy/s_axi_lite_clk]

  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] [get_bd_pins /axi_eth_phy/s_axi_lite_resetn]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {125000000} \
 ] [get_bd_pins /axi_eth_phy/userclk2_out]

  set_property -dict [ list \
   CONFIG.FREQ_HZ {62500000} \
 ] [get_bd_pins /axi_eth_phy/userclk_out]

  # Create instance: axi_eth_phy_dma, and set properties
  set axi_eth_phy_dma [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:7.1 axi_eth_phy_dma ]
  set_property -dict [ list \
   CONFIG.c_include_mm2s_dre {1} \
   CONFIG.c_include_s2mm_dre {1} \
   CONFIG.c_sg_length_width {16} \
   CONFIG.c_sg_use_stsapp_length {1} \
 ] $axi_eth_phy_dma

  # Create instance: axi_mem_intercon, and set properties
  set axi_mem_intercon [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_mem_intercon ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {6} \
 ] $axi_mem_intercon

  # Create instance: axi_shared_bram_ctrl, and set properties
  set axi_shared_bram_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_shared_bram_ctrl ]

  # Create instance: calib_complete_gpio, and set properties
  set calib_complete_gpio [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 calib_complete_gpio ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_IS_DUAL {0} \
 ] $calib_complete_gpio

  # Create instance: ddr3_sdram, and set properties
  set ddr3_sdram [ create_bd_cell -type ip -vlnv xilinx.com:ip:mig_7series:4.2 ddr3_sdram ]

  # Generate the PRJ File for MIG
  set str_mig_folder [get_property IP_DIR [ get_ips [ get_property CONFIG.Component_Name $ddr3_sdram ] ] ]
  set str_mig_file_name board.prj
  set str_mig_file_path ${str_mig_folder}/${str_mig_file_name}

  write_mig_file_vc707_ddr3_sdram_0 $str_mig_file_path

  set_property -dict [ list \
   CONFIG.BOARD_MIG_PARAM {ddr3_sdram} \
   CONFIG.RESET_BOARD_INTERFACE {reset} \
   CONFIG.XML_INPUT_FILE {board.prj} \
 ] $ddr3_sdram

  # Create instance: gpio_led8_dipswitchs8, and set properties
  set gpio_led8_dipswitchs8 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_led8_dipswitchs8 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {8} \
   CONFIG.GPIO2_BOARD_INTERFACE {led_8bits} \
   CONFIG.GPIO_BOARD_INTERFACE {dip_switches_8bits} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $gpio_led8_dipswitchs8

  # Create instance: gpio_xdma_irq_req, and set properties
  set gpio_xdma_irq_req [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_xdma_irq_req ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $gpio_xdma_irq_req

  # Create instance: gpio_xdma_usr_ack, and set properties
  set gpio_xdma_usr_ack [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 gpio_xdma_usr_ack ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_INTERRUPT_PRESENT {1} \
 ] $gpio_xdma_usr_ack

  # Create instance: linear_flash, and set properties
  set linear_flash [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_emc:3.0 linear_flash ]
  set_property -dict [ list \
   CONFIG.C_INCLUDE_DATAWIDTH_MATCHING_0 {1} \
   CONFIG.C_MAX_MEM_WIDTH {16} \
   CONFIG.C_MEM0_TYPE {2} \
   CONFIG.C_MEM0_WIDTH {16} \
   CONFIG.C_TAVDV_PS_MEM_0 {96000} \
   CONFIG.C_TCEDV_PS_MEM_0 {96000} \
   CONFIG.C_THZCE_PS_MEM_0 {9000} \
   CONFIG.C_TLZWE_PS_MEM_0 {20000} \
   CONFIG.C_TWC_PS_MEM_0 {40000} \
   CONFIG.C_TWPH_PS_MEM_0 {20000} \
   CONFIG.C_TWP_PS_MEM_0 {40000} \
   CONFIG.C_WR_REC_TIME_MEM_0 {200000} \
   CONFIG.EMC_BOARD_INTERFACE {linear_flash} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $linear_flash

  # Create instance: mblaze_alpha, and set properties
  set mblaze_alpha [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze:11.0 mblaze_alpha ]
  set_property -dict [ list \
   CONFIG.C_ADDR_TAG_BITS {16} \
   CONFIG.C_CACHE_BYTE_SIZE {16384} \
   CONFIG.C_DCACHE_ADDR_TAG {16} \
   CONFIG.C_DCACHE_BYTE_SIZE {16384} \
   CONFIG.C_DCACHE_LINE_LEN {8} \
   CONFIG.C_DCACHE_USE_WRITEBACK {0} \
   CONFIG.C_DCACHE_VICTIMS {8} \
   CONFIG.C_DEBUG_ENABLED {1} \
   CONFIG.C_DIV_ZERO_EXCEPTION {1} \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_D_LMB {1} \
   CONFIG.C_ICACHE_FORCE_TAG_LUTRAM {1} \
   CONFIG.C_ICACHE_LINE_LEN {8} \
   CONFIG.C_ICACHE_STREAMS {1} \
   CONFIG.C_ICACHE_VICTIMS {8} \
   CONFIG.C_ILL_OPCODE_EXCEPTION {1} \
   CONFIG.C_I_LMB {1} \
   CONFIG.C_MMU_ZONES {2} \
   CONFIG.C_M_AXI_D_BUS_EXCEPTION {1} \
   CONFIG.C_M_AXI_I_BUS_EXCEPTION {1} \
   CONFIG.C_OPCODE_0x0_ILLEGAL {1} \
   CONFIG.C_PVR {2} \
   CONFIG.C_UNALIGNED_EXCEPTIONS {1} \
   CONFIG.C_USE_BARREL {1} \
   CONFIG.C_USE_BRANCH_TARGET_CACHE {0} \
   CONFIG.C_USE_DCACHE {1} \
   CONFIG.C_USE_DIV {1} \
   CONFIG.C_USE_FPU {0} \
   CONFIG.C_USE_HW_MUL {2} \
   CONFIG.C_USE_ICACHE {1} \
   CONFIG.C_USE_MMU {3} \
   CONFIG.C_USE_MSR_INSTR {1} \
   CONFIG.C_USE_PCMP_INSTR {1} \
   CONFIG.G_TEMPLATE_LIST {4} \
   CONFIG.G_USE_EXCEPTIONS {1} \
 ] $mblaze_alpha

  # Create instance: mblaze_alpha_axi_intc, and set properties
  set mblaze_alpha_axi_intc [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc:4.1 mblaze_alpha_axi_intc ]
  set_property -dict [ list \
   CONFIG.C_HAS_FAST {1} \
 ] $mblaze_alpha_axi_intc

  # Create instance: mblaze_alpha_axi_periph, and set properties
  set mblaze_alpha_axi_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 mblaze_alpha_axi_periph ]
  set_property -dict [ list \
   CONFIG.NUM_MI {13} \
   CONFIG.NUM_SI {1} \
 ] $mblaze_alpha_axi_periph

  # Create instance: mblaze_alpha_local_memory
  create_hier_cell_mblaze_alpha_local_memory [current_bd_instance .] mblaze_alpha_local_memory

  # Create instance: mblaze_alpha_timer, and set properties
  set mblaze_alpha_timer [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_timer:2.0 mblaze_alpha_timer ]
  set_property -dict [ list \
   CONFIG.enable_timer2 {1} \
 ] $mblaze_alpha_timer

  # Create instance: mblaze_alpha_xlconcat, and set properties
  set mblaze_alpha_xlconcat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 mblaze_alpha_xlconcat ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {7} \
 ] $mblaze_alpha_xlconcat

  # Create instance: mdm_1, and set properties
  set mdm_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mdm:3.2 mdm_1 ]

  # Create instance: push_buttons_5bits, and set properties
  set push_buttons_5bits [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 push_buttons_5bits ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {5} \
   CONFIG.C_INTERRUPT_PRESENT {1} \
   CONFIG.GPIO_BOARD_INTERFACE {push_buttons_5bits} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $push_buttons_5bits

  # Create instance: reset_gpio, and set properties
  set reset_gpio [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 reset_gpio ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $reset_gpio

  # Create instance: rs232_uart, and set properties
  set rs232_uart [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_uart16550:2.0 rs232_uart ]
  set_property -dict [ list \
   CONFIG.C_S_AXI_ACLK_FREQ_HZ {200000000} \
   CONFIG.UART_BOARD_INTERFACE {rs232_uart} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $rs232_uart

  # Create instance: rst_ddr3_sdram_200M, and set properties
  set rst_ddr3_sdram_200M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_ddr3_sdram_200M ]
  set_property -dict [ list \
   CONFIG.C_AUX_RESET_HIGH {1} \
   CONFIG.C_AUX_RST_WIDTH {1} \
 ] $rst_ddr3_sdram_200M

  # Create instance: shared_bram, and set properties
  set shared_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 shared_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
 ] $shared_bram

  # Create instance: shared_intercon, and set properties
  set shared_intercon [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 shared_intercon ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
 ] $shared_intercon

  # Create instance: util_ds_buf_xdma, and set properties
  set util_ds_buf_xdma [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.1 util_ds_buf_xdma ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
 ] $util_ds_buf_xdma

  # Create instance: xdma_0, and set properties
  set xdma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xdma:4.1 xdma_0 ]
  set_property -dict [ list \
   CONFIG.PF0_DEVICE_ID_mqdma {9028} \
   CONFIG.PF2_DEVICE_ID_mqdma {9028} \
   CONFIG.PF3_DEVICE_ID_mqdma {9028} \
   CONFIG.axi_data_width {128_bit} \
   CONFIG.axilite_master_en {true} \
   CONFIG.axilite_master_scale {Kilobytes} \
   CONFIG.axilite_master_size {128} \
   CONFIG.axist_bypass_en {true} \
   CONFIG.axist_bypass_scale {Kilobytes} \
   CONFIG.axist_bypass_size {64} \
   CONFIG.axisten_freq {250} \
   CONFIG.cfg_mgmt_if {false} \
   CONFIG.pcie_blk_locn {X1Y1} \
   CONFIG.pf0_device_id {7029} \
   CONFIG.pf0_interrupt_pin {INTA} \
   CONFIG.pf0_msi_cap_multimsgcap {1_vector} \
   CONFIG.pf0_msi_enabled {true} \
   CONFIG.pf0_msix_cap_pba_bir {BAR_1} \
   CONFIG.pf0_msix_cap_pba_offset {00000000} \
   CONFIG.pf0_msix_cap_table_bir {BAR_1} \
   CONFIG.pf0_msix_cap_table_offset {00000000} \
   CONFIG.pf0_msix_cap_table_size {000} \
   CONFIG.pf0_msix_enabled {false} \
   CONFIG.pl_link_cap_max_link_speed {5.0_GT/s} \
   CONFIG.pl_link_cap_max_link_width {X8} \
   CONFIG.plltype {QPLL1} \
   CONFIG.xdma_axilite_slave {true} \
   CONFIG.xdma_num_usr_irq {1} \
 ] $xdma_0

  # Create interface connections
  connect_bd_intf_net -intf_net CLK_IN_D_0_1 [get_bd_intf_ports pcie_ref] [get_bd_intf_pins util_ds_buf_xdma/CLK_IN_D]
  connect_bd_intf_net -intf_net axi_eth_phy_dma_M_AXIS_CNTRL [get_bd_intf_pins axi_eth_phy/s_axis_txc] [get_bd_intf_pins axi_eth_phy_dma/M_AXIS_CNTRL]
  connect_bd_intf_net -intf_net axi_eth_phy_dma_M_AXIS_MM2S [get_bd_intf_pins axi_eth_phy/s_axis_txd] [get_bd_intf_pins axi_eth_phy_dma/M_AXIS_MM2S]
  connect_bd_intf_net -intf_net axi_eth_phy_dma_M_AXI_MM2S [get_bd_intf_pins axi_eth_phy_dma/M_AXI_MM2S] [get_bd_intf_pins axi_mem_intercon/S02_AXI]
  connect_bd_intf_net -intf_net axi_eth_phy_dma_M_AXI_S2MM [get_bd_intf_pins axi_eth_phy_dma/M_AXI_S2MM] [get_bd_intf_pins axi_mem_intercon/S03_AXI]
  connect_bd_intf_net -intf_net axi_eth_phy_dma_M_AXI_SG [get_bd_intf_pins axi_eth_phy_dma/M_AXI_SG] [get_bd_intf_pins axi_mem_intercon/S04_AXI]
  connect_bd_intf_net -intf_net axi_eth_phy_m_axis_rxd [get_bd_intf_pins axi_eth_phy/m_axis_rxd] [get_bd_intf_pins axi_eth_phy_dma/S_AXIS_S2MM]
  connect_bd_intf_net -intf_net axi_eth_phy_m_axis_rxs [get_bd_intf_pins axi_eth_phy/m_axis_rxs] [get_bd_intf_pins axi_eth_phy_dma/S_AXIS_STS]
  connect_bd_intf_net -intf_net axi_ethernet_0_mdio [get_bd_intf_ports mdio_mdc] [get_bd_intf_pins axi_eth_phy/mdio]
  connect_bd_intf_net -intf_net axi_ethernet_0_sgmii [get_bd_intf_ports sgmii] [get_bd_intf_pins axi_eth_phy/sgmii]
  connect_bd_intf_net -intf_net axi_mem_intercon_M00_AXI [get_bd_intf_pins axi_mem_intercon/M00_AXI] [get_bd_intf_pins ddr3_sdram/S_AXI]
  connect_bd_intf_net -intf_net axi_shared_bram_ctrl_BRAM_PORTA [get_bd_intf_pins axi_shared_bram_ctrl/BRAM_PORTA] [get_bd_intf_pins shared_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_shared_bram_ctrl_BRAM_PORTB [get_bd_intf_pins axi_shared_bram_ctrl/BRAM_PORTB] [get_bd_intf_pins shared_bram/BRAM_PORTB]
  connect_bd_intf_net -intf_net ddr3_sdram_DDR3 [get_bd_intf_ports ddr3_sdram] [get_bd_intf_pins ddr3_sdram/DDR3]
  connect_bd_intf_net -intf_net dip_switches_4bits_GPIO [get_bd_intf_ports dip_switches_8bits] [get_bd_intf_pins gpio_led8_dipswitchs8/GPIO]
  connect_bd_intf_net -intf_net dip_switches_8bits_GPIO2 [get_bd_intf_ports led_8bits] [get_bd_intf_pins gpio_led8_dipswitchs8/GPIO2]
  connect_bd_intf_net -intf_net linear_flash_EMC_INTF [get_bd_intf_ports linear_flash] [get_bd_intf_pins linear_flash/EMC_INTF]
  connect_bd_intf_net -intf_net mblaze_alpha_axi_periph_M05_AXI [get_bd_intf_pins axi_eth_phy/s_axi] [get_bd_intf_pins mblaze_alpha_axi_periph/M05_AXI]
  connect_bd_intf_net -intf_net mblaze_alpha_axi_periph_M06_AXI [get_bd_intf_pins axi_eth_phy_dma/S_AXI_LITE] [get_bd_intf_pins mblaze_alpha_axi_periph/M06_AXI]
  connect_bd_intf_net -intf_net mblaze_alpha_axi_periph_M07_AXI [get_bd_intf_pins mblaze_alpha_axi_periph/M07_AXI] [get_bd_intf_pins shared_intercon/S00_AXI]
  connect_bd_intf_net -intf_net mblaze_alpha_axi_periph_M08_AXI [get_bd_intf_pins gpio_xdma_irq_req/S_AXI] [get_bd_intf_pins mblaze_alpha_axi_periph/M08_AXI]
  connect_bd_intf_net -intf_net microblaze_0_M_AXI_DC [get_bd_intf_pins axi_mem_intercon/S00_AXI] [get_bd_intf_pins mblaze_alpha/M_AXI_DC]
  connect_bd_intf_net -intf_net microblaze_0_M_AXI_IC [get_bd_intf_pins axi_mem_intercon/S01_AXI] [get_bd_intf_pins mblaze_alpha/M_AXI_IC]
  connect_bd_intf_net -intf_net microblaze_0_axi_dp [get_bd_intf_pins mblaze_alpha/M_AXI_DP] [get_bd_intf_pins mblaze_alpha_axi_periph/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M01_AXI [get_bd_intf_pins mblaze_alpha_axi_periph/M01_AXI] [get_bd_intf_pins mblaze_alpha_timer/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M02_AXI [get_bd_intf_pins mblaze_alpha_axi_periph/M02_AXI] [get_bd_intf_pins reset_gpio/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M03_AXI [get_bd_intf_pins calib_complete_gpio/S_AXI] [get_bd_intf_pins mblaze_alpha_axi_periph/M03_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M04_AXI [get_bd_intf_pins gpio_xdma_usr_ack/S_AXI] [get_bd_intf_pins mblaze_alpha_axi_periph/M04_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M09_AXI [get_bd_intf_pins linear_flash/S_AXI_MEM] [get_bd_intf_pins mblaze_alpha_axi_periph/M09_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M10_AXI [get_bd_intf_pins mblaze_alpha_axi_periph/M10_AXI] [get_bd_intf_pins push_buttons_5bits/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M11_AXI [get_bd_intf_pins mblaze_alpha_axi_periph/M11_AXI] [get_bd_intf_pins rs232_uart/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M12_AXI [get_bd_intf_pins mblaze_alpha_axi_periph/M12_AXI] [get_bd_intf_pins xdma_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins mblaze_alpha/DEBUG] [get_bd_intf_pins mdm_1/MBDEBUG_0]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_1 [get_bd_intf_pins mblaze_alpha/DLMB] [get_bd_intf_pins mblaze_alpha_local_memory/DLMB]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_1 [get_bd_intf_pins mblaze_alpha/ILMB] [get_bd_intf_pins mblaze_alpha_local_memory/ILMB]
  connect_bd_intf_net -intf_net microblaze_0_intc_axi [get_bd_intf_pins mblaze_alpha_axi_intc/s_axi] [get_bd_intf_pins mblaze_alpha_axi_periph/M00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_interrupt [get_bd_intf_pins mblaze_alpha/INTERRUPT] [get_bd_intf_pins mblaze_alpha_axi_intc/interrupt]
  connect_bd_intf_net -intf_net push_buttons_5bits_GPIO [get_bd_intf_ports push_buttons_5bits] [get_bd_intf_pins push_buttons_5bits/GPIO]
  connect_bd_intf_net -intf_net rs232_uart_UART [get_bd_intf_ports rs232_uart] [get_bd_intf_pins rs232_uart/UART]
  connect_bd_intf_net -intf_net sgmii_mgt_clk_1 [get_bd_intf_ports sgmii_mgt_clk] [get_bd_intf_pins axi_eth_phy/mgt_clk]
  connect_bd_intf_net -intf_net shared_intercon_M00_AXI [get_bd_intf_pins axi_shared_bram_ctrl/S_AXI] [get_bd_intf_pins shared_intercon/M00_AXI]
  connect_bd_intf_net -intf_net sys_diff_clock_1 [get_bd_intf_ports sys_diff_clock] [get_bd_intf_pins ddr3_sdram/SYS_CLK]
  connect_bd_intf_net -intf_net xdma_0_M_AXI [get_bd_intf_pins axi_mem_intercon/S05_AXI] [get_bd_intf_pins xdma_0/M_AXI]
  connect_bd_intf_net -intf_net xdma_0_M_AXI_BYPASS [get_bd_intf_pins shared_intercon/S01_AXI] [get_bd_intf_pins xdma_0/M_AXI_BYPASS]
  connect_bd_intf_net -intf_net xdma_0_M_AXI_LITE [get_bd_intf_pins gpio_led8_dipswitchs8/S_AXI] [get_bd_intf_pins xdma_0/M_AXI_LITE]
  connect_bd_intf_net -intf_net xdma_0_pcie_mgt [get_bd_intf_ports pcie_exp] [get_bd_intf_pins xdma_0/pcie_mgt]

  # Create port connections
  connect_bd_net -net axi_eth_phy_dma_mm2s_cntrl_reset_out_n [get_bd_pins axi_eth_phy/axi_txc_arstn] [get_bd_pins axi_eth_phy_dma/mm2s_cntrl_reset_out_n]
  connect_bd_net -net axi_eth_phy_dma_mm2s_introut [get_bd_pins axi_eth_phy_dma/mm2s_introut] [get_bd_pins mblaze_alpha_xlconcat/In2]
  connect_bd_net -net axi_eth_phy_dma_mm2s_prmry_reset_out_n [get_bd_pins axi_eth_phy/axi_txd_arstn] [get_bd_pins axi_eth_phy_dma/mm2s_prmry_reset_out_n]
  connect_bd_net -net axi_eth_phy_dma_s2mm_introut [get_bd_pins axi_eth_phy_dma/s2mm_introut] [get_bd_pins mblaze_alpha_xlconcat/In3]
  connect_bd_net -net axi_eth_phy_dma_s2mm_prmry_reset_out_n [get_bd_pins axi_eth_phy/axi_rxd_arstn] [get_bd_pins axi_eth_phy_dma/s2mm_prmry_reset_out_n]
  connect_bd_net -net axi_eth_phy_dma_s2mm_sts_reset_out_n [get_bd_pins axi_eth_phy/axi_rxs_arstn] [get_bd_pins axi_eth_phy_dma/s2mm_sts_reset_out_n]
  connect_bd_net -net axi_eth_phy_interrupt [get_bd_pins axi_eth_phy/interrupt] [get_bd_pins mblaze_alpha_xlconcat/In4]
  connect_bd_net -net axi_ethernet_0_phy_rst_n [get_bd_ports phy_reset_out] [get_bd_pins axi_eth_phy/phy_rst_n]
  connect_bd_net -net axi_gpio_0_gpio_io_o [get_bd_pins gpio_xdma_irq_req/gpio_io_o] [get_bd_pins xdma_0/usr_irq_req]
  connect_bd_net -net axi_gpio_0_ip2intc_irpt [get_bd_pins gpio_xdma_usr_ack/ip2intc_irpt] [get_bd_pins mblaze_alpha_xlconcat/In1]
  connect_bd_net -net axi_timer_0_interrupt [get_bd_pins mblaze_alpha_timer/interrupt] [get_bd_pins mblaze_alpha_xlconcat/In5]
  connect_bd_net -net ddr3_sdram_init_calib_complete [get_bd_pins calib_complete_gpio/gpio_io_i] [get_bd_pins ddr3_sdram/init_calib_complete]
  connect_bd_net -net ddr3_sdram_mmcm_locked [get_bd_pins ddr3_sdram/mmcm_locked] [get_bd_pins rst_ddr3_sdram_200M/dcm_locked]
  connect_bd_net -net ddr3_sdram_ui_clk_sync_rst [get_bd_pins ddr3_sdram/ui_clk_sync_rst] [get_bd_pins rst_ddr3_sdram_200M/ext_reset_in]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mdm_1/Debug_SYS_Rst] [get_bd_pins rst_ddr3_sdram_200M/mb_debug_sys_rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins axi_eth_phy/axis_clk] [get_bd_pins axi_eth_phy/ref_clk] [get_bd_pins axi_eth_phy/s_axi_lite_clk] [get_bd_pins axi_eth_phy_dma/m_axi_mm2s_aclk] [get_bd_pins axi_eth_phy_dma/m_axi_s2mm_aclk] [get_bd_pins axi_eth_phy_dma/m_axi_sg_aclk] [get_bd_pins axi_eth_phy_dma/s_axi_lite_aclk] [get_bd_pins axi_mem_intercon/ACLK] [get_bd_pins axi_mem_intercon/M00_ACLK] [get_bd_pins axi_mem_intercon/S00_ACLK] [get_bd_pins axi_mem_intercon/S01_ACLK] [get_bd_pins axi_mem_intercon/S02_ACLK] [get_bd_pins axi_mem_intercon/S03_ACLK] [get_bd_pins axi_mem_intercon/S04_ACLK] [get_bd_pins axi_shared_bram_ctrl/s_axi_aclk] [get_bd_pins calib_complete_gpio/s_axi_aclk] [get_bd_pins ddr3_sdram/ui_clk] [get_bd_pins gpio_xdma_irq_req/s_axi_aclk] [get_bd_pins gpio_xdma_usr_ack/s_axi_aclk] [get_bd_pins linear_flash/rdclk] [get_bd_pins linear_flash/s_axi_aclk] [get_bd_pins mblaze_alpha/Clk] [get_bd_pins mblaze_alpha_axi_intc/processor_clk] [get_bd_pins mblaze_alpha_axi_intc/s_axi_aclk] [get_bd_pins mblaze_alpha_axi_periph/ACLK] [get_bd_pins mblaze_alpha_axi_periph/M00_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M01_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M02_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M03_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M04_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M05_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M06_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M07_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M08_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M09_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M10_ACLK] [get_bd_pins mblaze_alpha_axi_periph/M11_ACLK] [get_bd_pins mblaze_alpha_axi_periph/S00_ACLK] [get_bd_pins mblaze_alpha_local_memory/LMB_Clk] [get_bd_pins mblaze_alpha_timer/s_axi_aclk] [get_bd_pins push_buttons_5bits/s_axi_aclk] [get_bd_pins reset_gpio/s_axi_aclk] [get_bd_pins rs232_uart/s_axi_aclk] [get_bd_pins rst_ddr3_sdram_200M/slowest_sync_clk] [get_bd_pins shared_intercon/ACLK] [get_bd_pins shared_intercon/M00_ACLK] [get_bd_pins shared_intercon/S00_ACLK]
  connect_bd_net -net microblaze_0_intr [get_bd_pins mblaze_alpha_axi_intc/intr] [get_bd_pins mblaze_alpha_xlconcat/dout]
  connect_bd_net -net push_buttons_5bits_ip2intc_irpt [get_bd_pins mblaze_alpha_xlconcat/In6] [get_bd_pins push_buttons_5bits/ip2intc_irpt]
  connect_bd_net -net reset_1 [get_bd_ports reset] [get_bd_pins ddr3_sdram/sys_rst]
  connect_bd_net -net reset_gpio_gpio_io_o [get_bd_pins reset_gpio/gpio_io_o] [get_bd_pins rst_ddr3_sdram_200M/aux_reset_in]
  connect_bd_net -net rs232_uart_ip2intc_irpt [get_bd_pins mblaze_alpha_xlconcat/In0] [get_bd_pins rs232_uart/ip2intc_irpt]
  connect_bd_net -net rst_ddr3_sdram_200M_bus_struct_reset [get_bd_pins mblaze_alpha_local_memory/SYS_Rst] [get_bd_pins rst_ddr3_sdram_200M/bus_struct_reset]
  connect_bd_net -net rst_ddr3_sdram_200M_mb_reset [get_bd_pins mblaze_alpha/Reset] [get_bd_pins mblaze_alpha_axi_intc/processor_rst] [get_bd_pins rst_ddr3_sdram_200M/mb_reset]
  connect_bd_net -net rst_ddr3_sdram_200M_peripheral_aresetn [get_bd_pins axi_eth_phy/s_axi_lite_resetn] [get_bd_pins axi_eth_phy_dma/axi_resetn] [get_bd_pins axi_mem_intercon/ARESETN] [get_bd_pins axi_mem_intercon/M00_ARESETN] [get_bd_pins axi_mem_intercon/S00_ARESETN] [get_bd_pins axi_mem_intercon/S01_ARESETN] [get_bd_pins axi_mem_intercon/S02_ARESETN] [get_bd_pins axi_mem_intercon/S03_ARESETN] [get_bd_pins axi_mem_intercon/S04_ARESETN] [get_bd_pins axi_shared_bram_ctrl/s_axi_aresetn] [get_bd_pins calib_complete_gpio/s_axi_aresetn] [get_bd_pins ddr3_sdram/aresetn] [get_bd_pins gpio_xdma_irq_req/s_axi_aresetn] [get_bd_pins gpio_xdma_usr_ack/s_axi_aresetn] [get_bd_pins linear_flash/s_axi_aresetn] [get_bd_pins mblaze_alpha_axi_intc/s_axi_aresetn] [get_bd_pins mblaze_alpha_axi_periph/ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M00_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M01_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M02_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M03_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M04_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M05_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M06_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M07_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M08_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M09_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M10_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/M11_ARESETN] [get_bd_pins mblaze_alpha_axi_periph/S00_ARESETN] [get_bd_pins mblaze_alpha_timer/s_axi_aresetn] [get_bd_pins push_buttons_5bits/s_axi_aresetn] [get_bd_pins reset_gpio/s_axi_aresetn] [get_bd_pins rs232_uart/s_axi_aresetn] [get_bd_pins rst_ddr3_sdram_200M/peripheral_aresetn] [get_bd_pins shared_intercon/ARESETN] [get_bd_pins shared_intercon/M00_ARESETN] [get_bd_pins shared_intercon/S00_ARESETN]
  connect_bd_net -net sys_rst_n_0_1 [get_bd_ports pcie_rst_n] [get_bd_pins xdma_0/sys_rst_n]
  connect_bd_net -net util_ds_buf_0_IBUF_OUT [get_bd_pins util_ds_buf_xdma/IBUF_OUT] [get_bd_pins xdma_0/sys_clk]
  connect_bd_net -net xdma_0_axi_aclk [get_bd_pins axi_mem_intercon/S05_ACLK] [get_bd_pins gpio_led8_dipswitchs8/s_axi_aclk] [get_bd_pins mblaze_alpha_axi_periph/M12_ACLK] [get_bd_pins shared_intercon/S01_ACLK] [get_bd_pins xdma_0/axi_aclk]
  connect_bd_net -net xdma_0_axi_aresetn [get_bd_pins axi_mem_intercon/S05_ARESETN] [get_bd_pins gpio_led8_dipswitchs8/s_axi_aresetn] [get_bd_pins mblaze_alpha_axi_periph/M12_ARESETN] [get_bd_pins shared_intercon/S01_ARESETN] [get_bd_pins xdma_0/axi_aresetn]
  connect_bd_net -net xdma_0_usr_irq_ack [get_bd_pins gpio_xdma_usr_ack/gpio_io_i] [get_bd_pins xdma_0/usr_irq_ack]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces axi_eth_phy_dma/Data_SG] [get_bd_addr_segs ddr3_sdram/memmap/memaddr] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces axi_eth_phy_dma/Data_MM2S] [get_bd_addr_segs ddr3_sdram/memmap/memaddr] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces axi_eth_phy_dma/Data_S2MM] [get_bd_addr_segs ddr3_sdram/memmap/memaddr] -force
  assign_bd_address -offset 0x40C00000 -range 0x00040000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs axi_eth_phy/s_axi/Reg0] -force
  assign_bd_address -offset 0x41E00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs axi_eth_phy_dma/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0xC0000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs axi_shared_bram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x40010000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs calib_complete_gpio/S_AXI/Reg] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs ddr3_sdram/memmap/memaddr] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Instruction] [get_bd_addr_segs ddr3_sdram/memmap/memaddr] -force
  assign_bd_address -offset 0x40000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs mblaze_alpha_local_memory/dlmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x40030000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs gpio_xdma_irq_req/S_AXI/Reg] -force
  assign_bd_address -offset 0x40040000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs gpio_xdma_usr_ack/S_AXI/Reg] -force
  assign_bd_address -offset 0x40000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Instruction] [get_bd_addr_segs mblaze_alpha_local_memory/ilmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x60000000 -range 0x08000000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs linear_flash/S_AXI_MEM/Mem0] -force
  assign_bd_address -offset 0x41200000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs mblaze_alpha_axi_intc/S_AXI/Reg] -force
  assign_bd_address -offset 0x41C00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs mblaze_alpha_timer/S_AXI/Reg] -force
  assign_bd_address -offset 0x40050000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs push_buttons_5bits/S_AXI/Reg] -force
  assign_bd_address -offset 0x40060000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs reset_gpio/S_AXI/Reg] -force
  assign_bd_address -offset 0x44A00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs rs232_uart/S_AXI/Reg] -force
  assign_bd_address -offset 0x76000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces mblaze_alpha/Data] [get_bd_addr_segs xdma_0/S_AXI_LITE/CTL0] -force
  assign_bd_address -offset 0xC0000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_BYPASS] [get_bd_addr_segs axi_shared_bram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI] [get_bd_addr_segs ddr3_sdram/memmap/memaddr] -force
  assign_bd_address -offset 0x40000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_LITE] [get_bd_addr_segs gpio_led8_dipswitchs8/S_AXI/Reg] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.250485",
   "Default View_TopLeft":"-810,0",
   "ExpandedHierarchyInLayout":"",
   "commentid":"",
   "guistr":"# # String gsaved with Nlview 7.0.21  2019-05-29 bk=1.5064 VDI=41 GEI=36 GUI=JA:9.0 TLS
#  -string -flagsOSRD
preplace port push_buttons_5bits -pg 1 -lvl 8 -x 2950 -y 1100 -defaultsOSRD
preplace port linear_flash -pg 1 -lvl 8 -x 2950 -y 1420 -defaultsOSRD
preplace port dip_switches_8bits -pg 1 -lvl 8 -x 2950 -y 1970 -defaultsOSRD
preplace port ddr3_sdram -pg 1 -lvl 8 -x 2950 -y 1600 -defaultsOSRD
preplace port rs232_uart -pg 1 -lvl 8 -x 2950 -y 1250 -defaultsOSRD
preplace port pcie_exp -pg 1 -lvl 8 -x 2950 -y 1760 -defaultsOSRD
preplace port led_8bits -pg 1 -lvl 8 -x 2950 -y 1990 -defaultsOSRD
preplace port pcie_ref -pg 1 -lvl 0 -x -20 -y 1790 -defaultsOSRD
preplace port sys_diff_clock -pg 1 -lvl 0 -x -20 -y 1890 -defaultsOSRD
preplace port sgmii -pg 1 -lvl 8 -x 2950 -y 410 -defaultsOSRD
preplace port mdio_mdc -pg 1 -lvl 8 -x 2950 -y 390 -defaultsOSRD
preplace port sgmii_mgt_clk -pg 1 -lvl 0 -x -20 -y 400 -defaultsOSRD
preplace port reset -pg 1 -lvl 0 -x -20 -y 1910 -defaultsOSRD
preplace port pcie_rst_n -pg 1 -lvl 0 -x -20 -y 1860 -defaultsOSRD
preplace portBus phy_reset_out -pg 1 -lvl 8 -x 2950 -y 470 -defaultsOSRD
preplace inst mblaze_alpha_local_memory -pg 1 -lvl 5 -x 2060 -y 1290 -defaultsOSRD
preplace inst axi_mem_intercon -pg 1 -lvl 5 -x 2060 -y 930 -defaultsOSRD
preplace inst mblaze_alpha_timer -pg 1 -lvl 3 -x 1030 -y 530 -defaultsOSRD
preplace inst calib_complete_gpio -pg 1 -lvl 3 -x 1030 -y 1290 -defaultsOSRD
preplace inst ddr3_sdram -pg 1 -lvl 6 -x 2470 -y 1650 -defaultsOSRD
preplace inst gpio_led8_dipswitchs8 -pg 1 -lvl 6 -x 2470 -y 1980 -defaultsOSRD
preplace inst linear_flash -pg 1 -lvl 6 -x 2470 -y 1420 -defaultsOSRD
preplace inst mdm_1 -pg 1 -lvl 3 -x 1030 -y 1630 -defaultsOSRD
preplace inst mblaze_alpha -pg 1 -lvl 4 -x 1510 -y 970 -defaultsOSRD
preplace inst mblaze_alpha_axi_intc -pg 1 -lvl 3 -x 1030 -y 940 -defaultsOSRD
preplace inst mblaze_alpha_axi_periph -pg 1 -lvl 2 -x 630 -y 1290 -defaultsOSRD
preplace inst mblaze_alpha_xlconcat -pg 1 -lvl 2 -x 630 -y 130 -defaultsOSRD
preplace inst push_buttons_5bits -pg 1 -lvl 6 -x 2470 -y 1110 -defaultsOSRD
preplace inst reset_gpio -pg 1 -lvl 3 -x 1030 -y 730 -defaultsOSRD
preplace inst rs232_uart -pg 1 -lvl 6 -x 2470 -y 1260 -defaultsOSRD
preplace inst rst_ddr3_sdram_200M -pg 1 -lvl 1 -x 220 -y 970 -defaultsOSRD
preplace inst xdma_0 -pg 1 -lvl 4 -x 1510 -y 1730 -defaultsOSRD
preplace inst util_ds_buf_xdma -pg 1 -lvl 3 -x 1030 -y 1790 -defaultsOSRD
preplace inst gpio_xdma_irq_req -pg 1 -lvl 3 -x 1030 -y 1480 -defaultsOSRD
preplace inst gpio_xdma_usr_ack -pg 1 -lvl 3 -x 1030 -y 1130 -defaultsOSRD
preplace inst shared_intercon -pg 1 -lvl 5 -x 2060 -y 1560 -defaultsOSRD
preplace inst axi_shared_bram_ctrl -pg 1 -lvl 6 -x 2470 -y 1840 -defaultsOSRD
preplace inst shared_bram -pg 1 -lvl 7 -x 2800 -y 1840 -defaultsOSRD
preplace inst axi_eth_phy -pg 1 -lvl 6 -x 2470 -y 510 -defaultsOSRD
preplace inst axi_eth_phy_dma -pg 1 -lvl 4 -x 1510 -y 570 -defaultsOSRD
preplace netloc microblaze_0_intr 1 2 1 870 130n
preplace netloc microblaze_0_Clk 1 0 7 40 870 410 870 850 820 1250 740 1840 650 2300 1540 2630
preplace netloc ddr3_sdram_mmcm_locked 1 0 7 0 290 NJ 290 NJ 290 NJ 290 NJ 290 NJ 290 2670
preplace netloc ddr3_sdram_ui_clk_sync_rst 1 0 7 10 280 NJ 280 NJ 280 NJ 280 NJ 280 NJ 280 2660
preplace netloc rst_ddr3_sdram_200M_mb_reset 1 1 3 N 930 830 830 1240J
preplace netloc rst_ddr3_sdram_200M_bus_struct_reset 1 1 4 420J 810 NJ 810 NJ 810 1870
preplace netloc rst_ddr3_sdram_200M_peripheral_aresetn 1 1 5 400 920 860 650 1260 730 1900 660 2280
preplace netloc mdm_1_debug_sys_rst 1 0 4 20 410 NJ 410 NJ 410 1190
preplace netloc reset_gpio_gpio_io_o 1 0 4 30 640 NJ 640 NJ 640 1180
preplace netloc ddr3_sdram_init_calib_complete 1 3 4 NJ 1300 1780J 1370 2260J 1520 2640
preplace netloc reset_1 1 0 6 NJ 1910 NJ 1910 NJ 1910 1250J 1570 1800J 1730 2310J
preplace netloc axi_timer_0_interrupt 1 1 3 460 300 NJ 300 1180
preplace netloc rs232_uart_ip2intc_irpt 1 1 6 430 1660 880J 1560 NJ 1560 1820J 1720 2240J 1030 2640
preplace netloc xdma_0_axi_aclk 1 1 5 470 1710 NJ 1710 1240J 1550 1830 1740 2220
preplace netloc xdma_0_axi_aresetn 1 1 5 480 1720 NJ 1720 1230J 1540 1760 2000 N
preplace netloc sys_rst_n_0_1 1 0 4 NJ 1860 NJ 1860 NJ 1860 1270J
preplace netloc util_ds_buf_0_IBUF_OUT 1 3 1 1260J 1720n
preplace netloc axi_gpio_0_gpio_io_o 1 3 1 1200 1490n
preplace netloc xdma_0_usr_irq_ack 1 3 2 N 1130 1750
preplace netloc push_buttons_5bits_ip2intc_irpt 1 1 6 450 1650 870J 1050 1260J 1070 1800J 1410 2250J 1510 2630
preplace netloc axi_gpio_0_ip2intc_irpt 1 1 3 440 270 NJ 270 1200
preplace netloc axi_ethernet_0_phy_rst_n 1 6 2 NJ 470 NJ
preplace netloc axi_eth_phy_dma_mm2s_prmry_reset_out_n 1 4 2 1830 530 NJ
preplace netloc axi_eth_phy_dma_mm2s_cntrl_reset_out_n 1 4 2 1840 550 NJ
preplace netloc axi_eth_phy_dma_s2mm_prmry_reset_out_n 1 4 2 1850 570 NJ
preplace netloc axi_eth_phy_dma_s2mm_sts_reset_out_n 1 4 2 1870 590 NJ
preplace netloc axi_eth_phy_dma_mm2s_introut 1 1 4 480 10 NJ 10 NJ 10 1780
preplace netloc axi_eth_phy_dma_s2mm_introut 1 1 4 470 250 NJ 250 NJ 250 1760
preplace netloc axi_eth_phy_interrupt 1 1 6 480 260 NJ 260 NJ 260 NJ 260 NJ 260 2650
preplace netloc sys_diff_clock_1 1 0 6 20J 1700 NJ 1700 NJ 1700 1180J 1580 1810J 1710 2290J
preplace netloc microblaze_0_axi_periph_M04_AXI 1 2 1 830 1110n
preplace netloc rs232_uart_UART 1 6 2 NJ 1250 NJ
preplace netloc ddr3_sdram_DDR3 1 6 2 NJ 1600 NJ
preplace netloc microblaze_0_dlmb_1 1 4 1 1890 930n
preplace netloc microblaze_0_axi_periph_M03_AXI 1 2 1 840 1230n
preplace netloc microblaze_0_ilmb_1 1 4 1 1860 950n
preplace netloc xdma_0_M_AXI_BYPASS 1 4 1 1890 1490n
preplace netloc microblaze_0_axi_periph_M12_AXI 1 2 2 880J 1400 1220
preplace netloc linear_flash_EMC_INTF 1 6 2 NJ 1420 NJ
preplace netloc dip_switches_4bits_GPIO 1 6 2 NJ 1970 NJ
preplace netloc microblaze_0_axi_periph_M09_AXI 1 2 4 790J 1380 NJ 1380 NJ 1380 2290
preplace netloc microblaze_0_M_AXI_DC 1 4 1 1780 720n
preplace netloc microblaze_0_intc_axi 1 2 1 820 890n
preplace netloc microblaze_0_axi_periph_M02_AXI 1 2 1 810 710n
preplace netloc microblaze_0_interrupt 1 3 1 N 940
preplace netloc CLK_IN_D_0_1 1 0 3 NJ 1790 NJ 1790 NJ
preplace netloc push_buttons_5bits_GPIO 1 6 2 NJ 1100 NJ
preplace netloc microblaze_0_debug 1 3 1 1210 960n
preplace netloc microblaze_0_axi_periph_M10_AXI 1 2 4 820J 1210 1260J 1200 NJ 1200 2230
preplace netloc dip_switches_8bits_GPIO2 1 6 2 NJ 1990 NJ
preplace netloc xdma_0_pcie_mgt 1 4 4 1780J 1760 NJ 1760 NJ 1760 NJ
preplace netloc microblaze_0_axi_dp 1 1 4 480 380 NJ 380 NJ 380 1750
preplace netloc axi_mem_intercon_M00_AXI 1 5 1 2270 930n
preplace netloc microblaze_0_axi_periph_M11_AXI 1 2 4 NJ 1390 NJ 1390 NJ 1390 2250
preplace netloc microblaze_0_M_AXI_IC 1 4 1 1850 740n
preplace netloc xdma_0_M_AXI 1 4 1 1880 820n
preplace netloc microblaze_0_axi_periph_M01_AXI 1 2 1 780 480n
preplace netloc mblaze_alpha_axi_periph_M07_AXI 1 2 3 840J 1370 NJ 1370 1770
preplace netloc mblaze_alpha_axi_periph_M08_AXI 1 2 1 830 1330n
preplace netloc xdma_0_M_AXI_LITE 1 4 2 1790J 1750 2210
preplace netloc shared_intercon_M00_AXI 1 5 1 2230 1560n
preplace netloc axi_shared_bram_ctrl_BRAM_PORTA 1 6 1 N 1830
preplace netloc axi_shared_bram_ctrl_BRAM_PORTB 1 6 1 N 1850
preplace netloc axi_ethernet_0_sgmii 1 6 2 NJ 410 NJ
preplace netloc axi_ethernet_0_mdio 1 6 2 NJ 390 NJ
preplace netloc sgmii_mgt_clk_1 1 0 6 NJ 400 420J 390 NJ 390 NJ 390 NJ 390 2280J
preplace netloc axi_eth_phy_dma_M_AXIS_MM2S 1 4 2 1790 410 NJ
preplace netloc axi_eth_phy_dma_M_AXIS_CNTRL 1 4 2 1800 430 NJ
preplace netloc axi_eth_phy_m_axis_rxs 1 3 4 1260 270 NJ 270 NJ 270 2630
preplace netloc axi_eth_phy_m_axis_rxd 1 3 4 1250 240 NJ 240 NJ 240 2640
preplace netloc mblaze_alpha_axi_periph_M05_AXI 1 2 4 790 400 NJ 400 NJ 400 2300J
preplace netloc axi_eth_phy_dma_M_AXI_MM2S 1 4 1 1910 490n
preplace netloc axi_eth_phy_dma_M_AXI_S2MM 1 4 1 1880 510n
preplace netloc axi_eth_phy_dma_M_AXI_SG 1 4 1 1890 470n
preplace netloc mblaze_alpha_axi_periph_M06_AXI 1 2 2 800 420 1210J
levelinfo -pg 1 -20 220 630 1030 1510 2060 2470 2800 2950
pagesize -pg 1 -db -bbox -sgen -180 0 3140 2060
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_vc707()
cr_bd_vc707 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files vc707.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files vc707.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7vx485tffg1761-2 -flow {Vivado Synthesis 2019} -strategy "Flow_AreaMultThresholdDSP" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Flow_AreaMultThresholdDSP" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Flow_AreaMultThresholdDSP" -objects $obj
set_property -name "steps.synth_design.args.directive" -value "PerformanceOptimized" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7vx485tffg1761-2 -flow {Vivado Implementation 2019} -strategy "Performance_ExtraTimingOpt" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Performance_ExtraTimingOpt" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Performance_ExtraTimingOpt" -objects $obj
set_property -name "steps.place_design.args.directive" -value "ExtraTimingOpt" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.phys_opt_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.route_design.args.directive" -value "NoTimingRelaxation" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
